// Copyright (c) 2024 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import t from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@v0.1.0-esm/index.mjs";import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-accessor@v0.1.0-esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-write-accessor@v0.2.0-esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@v0.2.0-esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-function@v0.2.0-esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@v0.2.0-esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-constant-function@v0.2.0-esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-noop@v0.2.0-esm/index.mjs";import{factory as d}from"https://cdn.jsdelivr.net/gh/stdlib-js/random-base-mt19937@v0.1.0-esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-assert-is-nan@v0.2.0-esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/array-to-json@v0.2.0-esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@v0.1.1-esm/index.mjs";import{isPrimitive as u}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-number@v0.2.0-esm/index.mjs";import h from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-nan@v0.2.0-esm/index.mjs";import j from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-pow@v0.2.0-esm/index.mjs";import f from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-sin@v0.2.0-esm/index.mjs";import g from"https://cdn.jsdelivr.net/gh/stdlib-js/constants-float64-half-pi@v0.2.0-esm/index.mjs";function c(t,e){return!u(t)||h(t)?new TypeError(p("invalid argument. First argument must be a number and not NaN. Value: `%s`.",t)):!u(e)||h(e)?new TypeError(p("invalid argument. Second argument must be a number and not NaN. Value: `%s`.",e)):t>=e?new RangeError(p("invalid argument. Minimum support must be less than maximum support. Value: `[%f, %f]`.",t,e)):null}function v(t,e,n){return e+j(f(g*t()),2)*(n-e)}function b(){var u,h,j,f,g,b;if(0===arguments.length)h=d();else if(1===arguments.length){if(!s(u=arguments[0]))throw new TypeError(p("invalid argument. Options argument must be an object. Value: `%s`.",u));if(i(u,"prng")){if(!r(u.prng))throw new TypeError(p("invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.","prng",u.prng));h=u.prng}else h=d(u)}else{if(f=c(g=arguments[0],b=arguments[1]))throw f;if(arguments.length>2){if(!s(u=arguments[2]))throw new TypeError(p("invalid argument. Options argument must be an object. Value: `%s`.",u));if(i(u,"prng")){if(!r(u.prng))throw new TypeError(p("invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.","prng",u.prng));h=u.prng}else h=d(u)}else h=d()}return t(j=void 0===g?V:T,"NAME","arcsine"),u&&u.prng?(t(j,"seed",null),t(j,"seedLength",null),n(j,"state",o(null),m),t(j,"stateLength",null),t(j,"byteLength",null),t(j,"toJSON",o(null)),t(j,"PRNG",h)):(e(j,"seed",x),e(j,"seedLength",y),n(j,"state",E,L),e(j,"stateLength",w),e(j,"byteLength",N),t(j,"toJSON",O),t(j,"PRNG",h),h=h.normalized),j;function x(){return h.seed}function y(){return h.seedLength}function w(){return h.stateLength}function N(){return h.byteLength}function E(){return h.state}function L(t){h.state=t}function O(){var t={type:"PRNG"};return t.name=j.NAME,t.state=l(h.state),t.params=void 0===g?[]:[g,b],t}function T(){return v(h,g,b)}function V(t,e){return a(t)||a(e)||t>=e?NaN:v(h,t,e)}}var x=b();t(x,"factory",b);export{x as default,b as factory};
//# sourceMappingURL=index.mjs.map
